{"version":3,"file":"index.527842bd.js","sources":["../../vite/modulepreload-polyfill","../../main.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import './style.css';\nimport {Map, View} from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Projection from 'ol/proj/Projection';\nimport proj4 from 'proj4';\nimport {transformExtent} from 'ol/proj';\nimport {fromLonLat} from 'ol/proj';\nimport {register} from 'ol/proj/proj4';\nimport Feature from 'ol/Feature';\nimport GeometryType from 'ol/geom/GeometryType';\nimport colormap from 'colormap';\nimport {getArea} from 'ol/sphere';\nimport {Style, Fill, Stroke, Circle} from 'ol/style';\n\n\n\nproj4.defs(\"EPSG:2163\",\"+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\");\nregister(proj4);\n\n// \"UNIT_TYPE\":\"National Monument\"\n// \"UNIT_TYPE\":\"National Historic Site\"\n// \"UNIT_TYPE\":\"National Memorial\"\n// \"UNIT_TYPE\":\"National Military Park\"\n                // National Historical Park\n                // National Park\n\n\n// function getColor(feature) {\n//\n// }\n\n// map.on('click', function(e){\n//   console.log(e.coordinate);\n// })\n\n\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    new VectorLayer({\n      source: new VectorSource({\n        format: new GeoJSON(),\n        url: 'nps-project.json',\n      }),\n      style: function(feature) {\n            console.log(feature);\n          //now you can use any property of your feature to identify the different colors\n          //I am using the ID property of your data just to demonstrate\n           var color;\n           if (feature.get(\"UNIT_TYPE\")=='National Monument'){\n           color = \"#DFFF00\";\n         } else if (feature.get(\"UNIT_TYPE\")=='National Historic Site'){\n           color = \"#FFBF00\";\n           } else if (feature.get(\"UNIT_TYPE\")=='National Memorial'){\n             color = \"#FF7F50\";\n             } else if (feature.get(\"UNIT_TYPE\")=='National Military Park'){\n               color = \"#DE3163\";\n               } else if (feature.get(\"UNIT_TYPE\")=='National Historical Park'){\n                 color = \"#9FE2BF\";\n                 }\n                 else if (feature.get(\"UNIT_TYPE\")=='National Park'){\n                   color = \"#40E0D0\";\n                   } else if (feature.get(\"UNIT_TYPE\")=='Other Designation'){\n                     color = \"#6495ED\";\n                     } else if (feature.get(\"UNIT_TYPE\")=='Parkway'){\n                       color = \"#CCCCFF\";\n                       } else if (feature.get(\"UNIT_TYPE\")=='National Seashore'){\n                         color = \"#green\";\n                         }else if (feature.get(\"UNIT_TYPE\")=='\"National Park and Preserve'){\n                           color = \"#red\";\n                           }else if (feature.get(\"UNIT_TYPE\")=='National Scenic River'){\n                             color = \"#yellow\";\n                             }else if (feature.get(\"UNIT_TYPE\")=='National River and Recreation Area'){\n                               color = \"#581845\";\n                               }else if (feature.get(\"UNIT_TYPE\")=='National Recreation River'){\n                                 color = \"#FF5733\";\n                                 }else if (feature.get(\"UNIT_TYPE\")=='Ecological and Historic Preserver'){\n                                   color = \"#003399\";\n                                   }else if (feature.get(\"UNIT_TYPE\")=='National Scenic Trail'){\n                                     color = \"#6600ff\";\n                                     }else if (feature.get(\"UNIT_TYPE\")=='National Battlefield Site'){\n                                       color = \"#cc00ff\";\n                                       }else if (feature.get(\"UNIT_TYPE\")=='National Battlefield Park'){\n                                         color = \"#ffcc66\";\n                                         }\n                                       else if (feature.get(\"UNIT_TYPE\")=='International Historic Site'){\n                                         color = \"#cc0066\";\n                                         }else if (feature.get(\"UNIT_TYPE\")=='National Historic Site'){\n                                           color = \"#800000\";\n                                           }else if (feature.get(\"UNIT_TYPE\")=='Wild and Scenic River'){\n                                             color = \"#ff9933\";\n                                             }else if (feature.get(\"UNIT_TYPE\")=='National Scenic River'){\n                                               color = \"#99cc00\";\n                                               }else if (feature.get(\"UNIT_TYPE\")=='National Scenic Riverway'){\n                                                 color = \"#009933\";\n                                                 }else if (feature.get(\"UNIT_TYPE\")=='National Preserve'){\n                                                   color = \"#ff66cc\";\n                                                   }else if (feature.get(\"UNIT_TYPE\")=='National Recreation Area'){\n                                                     color = \"#ff6699\";\n                                                     }else if (feature.get(\"UNIT_TYPE\")=='National Historic Trail'){\n                                                       color = \"#3399ff\";\n                                                       }\n\n\n           else {\n          color = \"black\";\n           }\n\n           var retStyle =   new Style({\n               stroke: new Stroke({\n                 color: color,\n                 width: 5\n               })\n             });\n            return retStyle;\n\n           }\n\n    }),\n  ],\n  view: new View({\n    projection: 'EPSG:2163',\n    center: fromLonLat([37,-95], 'EPSG:2163'),\n    zoom: 3,\n    extent: transformExtent([167.65, 15.56, -65.69, 74.71], 'EPSG:4326', 'EPSG:2163'),\n  })\n\n});\n\n\n\n\n\n\nvar baseTextStyle = {\n  font: '12px Calibri,sans-serif',\n  textAlign: 'center',\n  offsetY: -15,\n  fill: new Fill({\n    color: [0,0,0,1]\n  }),\n  stroke: new Stroke({\n    color: [255,255,255,0.5],\n    width: 4\n  })\n};\n\n// when we move the mouse over a feature, we can change its style to\n// highlight it temporarily\nvar highlightStyle = new Style({\n  stroke: new Stroke({\n    color: [255,0,0,0.6],\n    width: 2\n  }),\n  fill: new Fill({\n    color: [255,0,0,0.2]\n  }),\n  zIndex: 1\n});\n\n// the style function for the feature overlay returns\n// a text style for point features and the highlight\n// style for other features (polygons in this case)\nfunction styleFunction(feature, resolution) {\n  var style;\n  var geom = feature.getGeometry();\n  if (geom.getType() == 'Point') {\n    var text = feature.get('text');\n    baseTextStyle.text = text;\n    // this is inefficient as it could create new style objects for the\n    // same text.\n    // A good exercise to see if you understand would be to add caching\n    // of this text style\n    var isoCode = feature.get('isoCode').toLowerCase();\n    style = new style.Style({\n      text: new style.Text(baseTextStyle),\n      image: new style.Icon({\n        src: '../assets/img/flags/'+isoCode+'.png'\n      }),\n      zIndex: 2\n    });\n  } else {\n    style = highlightStyle;\n  }\n\n  return [style];\n}\n\nvar featureOverlay = new FeatureOverlay({\n  map: map,\n  style: styleFunction\n});\n\nmap.on('pointermove', function(browserEvent) {\n  // first clear any existing features in the overlay\n  featureOverlay.getFeatures().clear();\n  var coordinate = browserEvent.coordinate;\n  var pixel = browserEvent.pixel;\n  // then for each feature at the mouse position ...\n  map.forEachFeatureAtPixel(pixel, function(feature, layer) {\n    // check the layer property, if it is not set then it means we\n    // are over an OverlayFeature and we can ignore this feature\n    if (!layer) {\n      return;\n    }\n    // test the feature's geometry type and compute a reasonable point\n    // at which to display the text.\n    var geometry = feature.getGeometry();\n    var point;\n    switch (geometry.getType()) {\n    case 'UNIT_TYPE':\n      var poly = geometry.getPolygons().reduce(function(left, right) {\n        return left.getArea() > right.getArea() ? left : right;\n      });\n      point = poly.getInteriorPoint().getCoordinates();\n      break;\n    case 'UNIT_NAME':\n      point = geometry.getInteriorPoint().getCoordinates();\n      break;\n    default:\n      point = geometry.getClosestPoint(coordinate);\n    }\n    // create a new feature to display the text\n    textFeature = new Feature({\n      geometry: new geom.Point(point),\n      text: feature.get('name'),\n      isoCode: feature.get('iso_a2').toLowerCase()\n    });\n    // and add it to the featureOverlay.  Also add the feature itself\n    // so the country gets outlined\n    featureOverlay.addFeature(textFeature);\n    featureOverlay.addFeature(feature);\n  });\n});\n"],"names":[],"mappings":"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"}